// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sway.Data;

#nullable disable

namespace Sway.Data.SwayMigrations
{
    [DbContext(typeof(SwayContext))]
    [Migration("20230412180626_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.15");

            modelBuilder.Entity("Sway.Models.Assessment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpinionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("aName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("aNegSentiment")
                        .HasColumnType("REAL");

                    b.Property<double>("aPosSentiment")
                        .HasColumnType("REAL");

                    b.Property<double>("aSentiment")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("OpinionID");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("Sway.Models.Document", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("dName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("docNegSentiment")
                        .HasColumnType("REAL");

                    b.Property<double>("docNeutralSentiment")
                        .HasColumnType("REAL");

                    b.Property<double>("docPosSentiment")
                        .HasColumnType("REAL");

                    b.Property<string>("docSentiment")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Sway.Models.Opinion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PhraseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("oName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("oNegSentiment")
                        .HasColumnType("REAL");

                    b.Property<double>("oPosSentiment")
                        .HasColumnType("REAL");

                    b.Property<double>("oSentiment")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("PhraseID");

                    b.ToTable("Opinion");
                });

            modelBuilder.Entity("Sway.Models.Phrase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("negSentiment")
                        .HasColumnType("REAL");

                    b.Property<double>("neutralSentiment")
                        .HasColumnType("REAL");

                    b.Property<string>("pName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("posSentiment")
                        .HasColumnType("REAL");

                    b.Property<double>("sentiment")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("DocumentID");

                    b.ToTable("Phrases");
                });

            modelBuilder.Entity("Sway.Models.Assessment", b =>
                {
                    b.HasOne("Sway.Models.Opinion", "Opinion")
                        .WithMany("Assessments")
                        .HasForeignKey("OpinionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opinion");
                });

            modelBuilder.Entity("Sway.Models.Opinion", b =>
                {
                    b.HasOne("Sway.Models.Phrase", "Phrase")
                        .WithMany("Opinions")
                        .HasForeignKey("PhraseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phrase");
                });

            modelBuilder.Entity("Sway.Models.Phrase", b =>
                {
                    b.HasOne("Sway.Models.Document", "Document")
                        .WithMany("Phrases")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Sway.Models.Document", b =>
                {
                    b.Navigation("Phrases");
                });

            modelBuilder.Entity("Sway.Models.Opinion", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("Sway.Models.Phrase", b =>
                {
                    b.Navigation("Opinions");
                });
#pragma warning restore 612, 618
        }
    }
}
